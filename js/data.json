[
      {
        "name": "Truck and Automobile Database App",
        "description": "The goal of this programming project is to design and create a working Java application to access and update the Truck table in a Relational Database System (RDBMS). The RDBMS I am using is MySQL. The functionalities I must include in this program are the ability to view records, update records, delete records, insert a new record, and clear the records in the Truck table. The primary key used for the database is the VIN# - an unique truck identifier.",
        "languages": [
          "Java",
          "JSwing",
          "MySQL",
          "Netbeans"
        ],
        "endDate": 1365566400000,
        "images": [
          "java_truckauto-rdbms/2.selection.jpg",
          "java_truckauto-rdbms/3.view.jpg",
          "java_truckauto-rdbms/4.update.jpg",
          "java_truckauto-rdbms/7.sqltable.jpg"
        ],
        "link": "https://github.com/netlams/rdbms-truckautotable"
      },
      {
        "name": "Website Crawler",
        "description": "An information retrieval system for indexed websites. Similar to a search engine that lets the user enter keywords and return all results that contains the keywords algorithmicly sorted. The dataset this application uses is created by 'web crawling' a seeder website specified by the user. From the seeder website as the starting point, it recursively identifies all the hyperlinks in the webpage and adds them to the list of URLs to visit while collecting all the words. Words are then normalized and indexed to be stored in a text file.",
        "languages": [
          "Java",
          "JSwing",
          "HTML",
          "Netbeans"
        ],
        "endDate": 1366689600000,
        "images": [
          "java_website-crawler/1.gui tested.png",
          "java_website-crawler/2.building tested.png",
          "java_website-crawler/7.search scenario1 tested.png"
        ],
        "link": "https://github.com/netlams/website-crawler"
      },
      {
        "name": "Cryto Cracker",
        "description": "In this project, the goal is to decrypt a text file encypted with a shift cipher. A shift cipher is a basic cryptographic algorithm in which encryption is performed by substituting each character in the plaintext with the character that's a fixed number of characters (i.e. the shift value) later in the alphabet. For example, if our shift value is 2, the plaintext cabbage becomes ecddcig.",
        "languages": [
          "GCC Compiler",
          "C"
        ],
        "endDate": 1414555200000,
        "images": [
          "c_cryptocracker/encypted.png",
          "c_cryptocracker/begin.png"
        ],
        "link": "https://github.com/netlams/CryptoCracker"
      },
      {
        "name": "UNIX Shell",
        "description": "A “shell” is a command-line ininterpreter allowing users to type in commands for execution while masking the underlying details of the operating system and the kernel. The goal of this project is to understand and familiarize how shell work, in particular an UNIX shell, how processes work, and how process interact with each other. This program will emulate the basic functionalities of the UNIX shell. Functions include accepting/executing Unix command (e.g. ls, cat, mkdir, rm, touch, etc.), accepting multiple options/flags/arguments, using the specified path, concurrently running processes in the background (with the & operator), I/O Redirection, and shell piping.",
        "languages": [
          "GCC Compiler",
          "System Calls",
          "C++"
        ],
        "endDate": 1424840400000,
        "images": [
          "cpp_unix-shell/simplecmds.png",
          "cpp_unix-shell/redirection.png"
        ],
        "link": ""
      },
      {
        "name": "Producer-Consumer Problem aka Bounded-Buffer Problem",
        "description": "In this laboratory project I want to build solutions to the classic producer-consumer problem – also known as the bounded-buffer problem. Essentially this problem deals with situations where there are a number of producers and a number of consumers. These entities are assigned instructions to perform individually but would require accessing the shared buffer queue between all them. Producer theads are each to 'produce' an item (whatever the item is doesn't matter) and then deposit it into the an avaiable slot/cell in the memory buffer. Consumer threads each would access a slot/cell and 'consume' the item. I have completed two solutions: one for Windows and one for UNIX/Linux system. Each solutions uses a similar but different approach.",
        "languages": [
          "GCC Compiler",
          "System Calls",
          "C++",
          "PThread API Library",
          "WIN32 API Library",
          "Visual Studio"
        ],
        "endDate": 1427515200000,
        "images": [
          "cpp_producer-consumer/resultdata1.JPG"
        ],
        "link": "https://github.com/netlams/synchronization-producer-consumer"
      },
      {
        "name": "Virtual File System Design and Implementation",
        "description": "In this project I want to design a file system similar to a FAT File System and write a program to interact with it. File systems are an essential component of an operating system because they control how data are stored and retrieved. File systems give meaning of all the data by enforcing a unified structure and grouping related information into logical units called files. File systems need to keep track of all the files within it, and one such method is to group them within directories forming a hierarchical tree structure. Each directory individually manage its own set of files and keeps track of the file descriptions (meta-data) and space allocation for each file. The file system is essentially made up of two parts: the logical directory (keep track of all files and their storage location) and the data section (actual bits and bytes of the file). All files will also be recorded as entries in a file-allocation table (FAT) in the logical directory. The actual data are written into clusters of a fixed size within the data section.",
        "languages": [
          "System Calls",
          "C++",
          "Visual Studio"
        ],
        "endDate": 1430193600000,
        "images": [
          "cpp_filesys/filesys.png",
          "cpp_filesys/listfiles.png",
          "cpp_filesys/delfiles.png"
        ],
        "link": ""
      },
      {
        "name": "Real Estate Web App",
        "description": "A dynamic web application based on a proposed business model. Include Create, Read, Update, and Delete (CRUD) functionalties interacting with a back-end MySql database. This project follows the MVC paradigm.",
        "languages": [
          "Java Server Pages",
          "HTML",
          "CSS",
          "Javascript",
          "JQuery",
          "Ajax",
          "MVC",
          "Netbeans"
        ],
        "endDate": 1430193600000,
        "images": [
          "jsp_realestate/home.PNG",
          "jsp_realestate/listing.PNG",
          "jsp_realestate/search.PNG"
        ],
        "link": "https://github.com/netlams/JSPwebapp_realestate"
      }
  ]